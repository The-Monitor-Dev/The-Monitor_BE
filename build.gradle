plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.google.cloud.tools.jib' version '3.3.1' // Add JIB plugin
}

jib {
    from {
        image = 'openjdk:21-jdk-slim'
    }
    to {
        image = "${System.getenv('DOCKER_USERNAME')}/the_monitor:latest"
        auth {
            username = System.getenv('DOCKER_USERNAME')
            password = System.getenv('DOCKER_PASSWORD')
        }
    }
    container {
        ports = ['8080']
        environment = [
                'SPRING_PROFILES_ACTIVE'        : 'prod',
                'SPRING_DATASOURCE_URL'         : System.getenv('SPRING_DATASOURCE_URL'),
                'SPRING_DATASOURCE_USERNAME'    : System.getenv('SPRING_DATASOURCE_USERNAME'),
                'SPRING_DATASOURCE_PASSWORD'    : System.getenv('SPRING_DATASOURCE_PASSWORD'),
                'SPRING_MAIL_HOST'              : 'smtp.gmail.com',
                'SPRING_MAIL_PORT'              : '587',
                'SPRING_MAIL_USERNAME'          : System.getenv('SPRING_MAIL_USERNAME'),
                'SPRING_MAIL_PASSWORD'          : System.getenv('SPRING_MAIL_PASSWORD'),
                'JWT_SECRET_KEY'                : System.getenv('JWT_SECRET_KEY'),
                'JWT_ACCESS_TOKEN_EXPIRE'       : System.getenv('JWT_ACCESS_TOKEN_EXPIRE'),
                'JWT_REFRESH_TOKEN_EXPIRE'      : System.getenv('JWT_REFRESH_TOKEN_EXPIRE'),
                'SPRING_REDIS_HOST'             : 'redis-server',
                'SPRING_REDIS_PORT'             : '6379'
        ]
    }
}

group = 'the_monitor'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'mysql:mysql-connector-java:8.0.33'

    // jwt & json
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // gson
    implementation 'com.google.code.gson:gson'

    // json
    implementation 'org.json:json:20230227'

    // mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // swagger
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.2.0'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

// 'bootJar'를 사용해 실행 가능한 JAR을 생성
jar {
    enabled = false
}

bootJar {
    archiveFileName = 'the_monitor-0.0.1.jar'
}
